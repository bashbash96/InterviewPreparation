# -----------------------------------------------------------------------
"""
Max Rectangle in Binary Matrix

Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing all ones and return its area.

Bonus if you can solve it in O(n^2) or less.

Example :

A : [  1 1 1
       0 1 1
       1 0 0
    ]

Output : 4

As the max area rectangle is created by the 2x2 rectangle created by (0,1), (0,2), (1,1) and (1,2)

"""


class Solution:
    # @param A : list of list of integers
    # @return an integer
    def maximalRectangle(self, A):

        curr_row = [0] * len(A[0])
        max_area = 0
        for row in range(len(A)):
            for col in range(len(A[0])):
                if A[row][col] == 0:
                    curr_row[col] = 0
                else:
                    curr_row[col] += A[row][col]

            max_area = max(max_area, calc_histo_area(curr_row))

        return max_area

    # time O(n * m)
    # space O(m)


def calc_histo_area(arr):
    stack = []
    curr_area = 0
    max_area = 0

    for i in range(len(arr)):
        curr_height = arr[i]
        while stack and arr[stack[-1]] > curr_height:
            curr_area = calc_area(arr, stack, i)
            max_area = max(max_area, curr_area)
        stack.append(i)
    i += 1
    while stack:
        curr_area = calc_area(arr, stack, i)
        max_area = max(max_area, curr_area)

    return max_area


def calc_area(arr, stack, i):
    top = stack.pop()
    if not stack:
        return arr[top] * i
    else:
        return arr[top] * (i - stack[-1] - 1)

# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
