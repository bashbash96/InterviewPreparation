# -----------------------------------------------------------------------
"""
17.1 Add Without Plus: Write a function that adds two numbers. You should not use + or any arithmetic
operators.
"""


def add(num1, num2):
    if num2 == 0:
        return num1

    curr_sum = num1 ^ num2
    carry = (num1 & num2) << 1

    return add(curr_sum, carry)

    # time O(log(n))
    # space O(log(n))


# -----------------------------------------------------------------------
"""
17.2 Shuffle: Write a method to shuffle a deck of cards. It must be a perfect shuffle-in other words, each
of the 52! permutations of the deck has to be equally likely. Assume that you are given a random
number generator which is perfect.
"""
from random import randint


def shuffle(cards):
    for i in range(len(cards) - 1, -1, -1):
        r = randint(0, i)
        cards[i], cards[r] = cards[r], cards[i]

    return cards

    # time O(n)
    # space O(1)


# -----------------------------------------------------------------------
"""
17.3 Random Set: Write a method to randomly generate a set of m integers from an array of size n. Each
element must have equal probability of being chosen.
"""


def random_set(arr, m):
    res = set()
    for i in range(len(arr) - 1, -1, -1):
        r = randint(0, i)
        res.add(arr[r])
        arr[r], arr[i] = arr[i], arr[r]
        if len(res) == m:
            break

    return res

    # time O(n)
    # space O(1)


def random_set_reservoir(arr, m):
    res = arr[:m]

    for i in range(m, len(arr)):
        r = randint(0, i - 1)
        if r < m:
            res[r] = arr[i]

    return res

    # time O(n)
    # space O(1)

# -----------------------------------------------------------------------

# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
